<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2016 Happeo Oy
  Copyright 2015 Google LLC

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  This file has been modified by Happeo Oy.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd" child.project.url.inherit.append.path="false">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.google.code.gson</groupId>
  <artifactId>gson-parent</artifactId>
  <version>2.10.2-happeo-1-SNAPSHOT</version>
  <packaging>pom</packaging>

  <name>Gson Parent</name>
  <description>Gson JSON library</description>
  <url>https://github.com/getuniverse/gson</url>

  <modules>
    <module>gson</module>
    <module>graal-native-image-test</module>
    <module>shrinker-test</module>
    <module>extras</module>
    <module>metrics</module>
    <module>proto</module>
  </modules>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.release>8</maven.compiler.release>
    <maven.compiler.testRelease>17</maven.compiler.testRelease>

    <!-- Make the build reproducible, see https://maven.apache.org/guides/mini/guide-reproducible-builds.html -->
    <!-- Automatically updated by Maven Release Plugin -->
    <project.build.outputTimestamp>2023-01-01T00:00:00Z</project.build.outputTimestamp>
  </properties>

  <!-- These attributes specify that the URLs should be inherited by the modules as is, to avoid constructing
    invalid URLs, see also https://maven.apache.org/ref/3.9.1/maven-model-builder/index.html#inheritance-assembly -->
  <scm child.scm.url.inherit.append.path="false" child.scm.connection.inherit.append.path="false" child.scm.developerConnection.inherit.append.path="false">
    <url>https://github.com/getuniverse/gson/</url>
    <connection>scm:git:https://github.com/getuniverse/gson.git</connection>
    <developerConnection>scm:git:git@github.com:getuniverse/gson.git</developerConnection>
    <tag>HEAD</tag>
  </scm>

  <developers>
    <developer>
      <id>google</id>
      <organization>Google</organization>
      <organizationUrl>https://www.google.com</organizationUrl>
    </developer>
    <developer>
      <id>happeo</id>
      <organization>Happeo</organization>
      <organizationUrl>https://www.happeo.com</organizationUrl>
    </developer>
  </developers>

  <issueManagement>
    <system>GitHub Issues</system>
    <url>https://github.com/getuniverse/gson/issues</url>
  </issueManagement>

  <licenses>
    <license>
      <name>Apache-2.0</name>
      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
    </license>
  </licenses>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.13.2</version>
        <exclusions>
          <exclusion>
            <groupId>org.hamcrest</groupId>
            <artifactId>*</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.hamcrest</groupId>
        <artifactId>hamcrest</artifactId>
        <version>2.2</version>
      </dependency>
      <dependency>
        <groupId>com.google.truth</groupId>
        <artifactId>truth</artifactId>
        <version>1.1.5</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>com.google.errorprone</groupId>
      <artifactId>error_prone_annotations</artifactId>
      <version>2.23.0</version>
      <optional>true</optional>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.4.1</version>
        <executions>
          <execution>
            <id>enforce-versions</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <!-- Usage of `.mvn/jvm.config` for Error Prone requires at least Maven 3.3.1 -->
                  <version>[3.3.1,)</version>
                </requireMavenVersion>

                <!-- Enforce that correct JDK version is used to avoid cryptic build errors -->
                <requireJavaVersion>
                  <!-- Other plugins of this build require at least JDK 11 -->
                  <version>[11,)</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Spotless plugin: keeps the code formatted following the google-java-styleguide -->
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>2.40.0</version>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
        <!-- Note: The configuration here is not specific to the `<execution>` above to allow users to run
          `mvn spotless:apply` from the command line, using the same configuration -->
        <configuration>
          <!-- Perform some basic formatting for non-Java code -->
          <formats>
            <format>
              <includes>
                <include>*.md</include>
                <include>*.xml</include>
                <include>.github/**/*.yml</include>
                <include>.gitignore</include>
              </includes>
              <!-- For Markdown files removing trailing whitespace causes issues for hard line breaks,
                which use two trailing spaces. However, the trailing spaces are difficult to notice anyway;
                prefer a trailing `\` instead of two spaces. -->
              <trimTrailingWhitespace />
              <endWithNewline />
              <indent>
                <spaces>true</spaces>
                <!-- This seems to mostly (or only?) affect the suggested fix in case code contains tabs -->
                <spacesPerTab>2</spacesPerTab>
              </indent>
            </format>
          </formats>

          <java>
            <!-- Exclude classes which need Java 17 for compilation; Google Java Format internally relies on javac,
              so formatting will fail if build is executed with JDK 11 -->
            <excludes>
              <exclude>src/test/java/com/google/gson/functional/Java17RecordTest.java</exclude>
              <exclude>src/test/java/com/google/gson/native_test/Java17RecordReflectionTest.java</exclude>
            </excludes>
            <googleJavaFormat>
              <style>GOOGLE</style>
              <reflowLongStrings>true</reflowLongStrings>
              <reorderImports>true</reorderImports>
              <formatJavadoc>true</formatJavadoc>
            </googleJavaFormat>
            <formatAnnotations />     <!-- Puts type annotations immediately before types. -->
          </java>
        </configuration>
      </plugin>

      <!-- Attaches a `.buildinfo` file which contains information for reproducing the build,
        such as OS, JDK version, ...
        Since this is a multi-module Maven project, only one aggregated file will be created for
        the last module, see the note on https://maven.apache.org/plugins/maven-artifact-plugin/usage.html#recording-buildinfo-file -->
      <!-- The other goals of this plugin are run by the GitHub workflow to verify that
        the build is reproducible (see `artifact:...` usage in the workflow) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-artifact-plugin</artifactId>
        <version>3.5.0</version>
        <executions>
          <execution>
            <goals>
              <goal>buildinfo</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>

    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.11.0</version>
          <configuration>
            <showWarnings>true</showWarnings>
            <showDeprecation>true</showDeprecation>
            <failOnWarning>true</failOnWarning>
            <compilerArgs>
              <!-- Args related to Error Prone, see: https://errorprone.info/docs/installation#maven -->
              <arg>-XDcompilePolicy=simple</arg>
              <arg>-Xplugin:ErrorProne
                -XepExcludedPaths:.*/generated-test-sources/protobuf/.*
                -Xep:NotJavadoc:OFF <!-- Triggered by local class. -->
              </arg>
              <!-- Enable all warnings, except for ones which cause issues when building with newer JDKs, see also
                https://docs.oracle.com/en/java/javase/11/tools/javac.html -->
              <compilerArg>-Xlint:all,-options</compilerArg>
            </compilerArgs>
            <annotationProcessorPaths>
              <path>
                <groupId>com.google.errorprone</groupId>
                <artifactId>error_prone_core</artifactId>
                <version>2.23.0</version>
              </path>
            </annotationProcessorPaths>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>3.6.2</version>
          <configuration>
            <!-- Specify newer JDK as target to allow linking to newer Java API, and to generate
              module overview in Javadoc for Gson's module descriptor -->
            <release>11</release>
            <!-- Exclude `missing` group because some tags have been omitted when they are redundant -->
            <doclint>all,-missing</doclint>
            <!-- Link against newer Java API Javadoc because most users likely
              use a newer Java version than the one used for building this project -->
            <detectJavaApiLink>false</detectJavaApiLink>
            <links>
              <link>https://docs.oracle.com/en/java/javase/11/docs/api/</link>
              <link>https://errorprone.info/api/latest/</link>
            </links>
            <!-- Disable detection of offline links between Maven modules:
              (1) Only `gson` module is published, so for other modules Javadoc links don't
              matter much at the moment; (2) The derived URL for the modules is based on
              the project URL (= Gson GitHub repo) which is incorrect because it is not
              hosting the Javadoc (3) It might fail due to https://bugs.openjdk.java.net/browse/JDK-8212233 -->
            <detectOfflineLinks>false</detectOfflineLinks>
            <!-- Only show warnings and errors -->
            <quiet>true</quiet>
            <failOnWarnings>true</failOnWarnings>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>3.2.2</version>
          </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.3.0</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-install-plugin</artifactId>
          <version>3.1.1</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>3.3.0</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-release-plugin</artifactId>
          <version>3.0.1</version>
          <configuration>
            <autoVersionSubmodules>true</autoVersionSubmodules>
            <!-- Disable Maven Super POM release profile and instead use own one -->
            <useReleaseProfile>false</useReleaseProfile>
            <releaseProfiles>release</releaseProfiles>
            <!-- Run custom goals to replace version references, see plugin configuration below -->
            <!-- Also run `verify` to make sure tests still pass with new version number;
              also seems to be necessary because without `package`, goals fail for modules depending
              on each other; possibly same issue as https://issues.apache.org/jira/browse/MRELEASE-271 -->
            <preparationGoals>
              clean verify
              antrun:run@replace-version-placeholders
              antrun:run@replace-old-version-references
              antrun:run@git-add-changed
            </preparationGoals>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
